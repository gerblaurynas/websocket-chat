// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

import websocket "nhooyr.io/websocket"

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// Close provides a mock function with given fields: code, reason
func (_m *Connection) Close(code websocket.StatusCode, reason string) error {
	ret := _m.Called(code, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(websocket.StatusCode, string) error); ok {
		r0 = rf(code, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx
func (_m *Connection) Read(ctx context.Context) (websocket.MessageType, []byte, error) {
	ret := _m.Called(ctx)

	var r0 websocket.MessageType
	if rf, ok := ret.Get(0).(func(context.Context) websocket.MessageType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(websocket.MessageType)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(context.Context) []byte); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Write provides a mock function with given fields: ctx, typ, p
func (_m *Connection) Write(ctx context.Context, typ websocket.MessageType, p []byte) error {
	ret := _m.Called(ctx, typ, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, websocket.MessageType, []byte) error); ok {
		r0 = rf(ctx, typ, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
